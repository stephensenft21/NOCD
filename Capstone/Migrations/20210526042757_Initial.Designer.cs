// <auto-generated />
using System;
using Capstone.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Capstone.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210526042757_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capstone.Models.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8259c918-a023-4386-a764-0d9756c0c17d",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBefIt2dDe+gsj5d+Djeh4OrG13EI5GbGu6JDNTmxdJMWFzQGJMe7yryIPgHSpGLtA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794577",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("Capstone.Models.Data.Compulsion", b =>
                {
                    b.Property<int>("CompulsionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompulsionId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Compulsion");

                    b.HasData(
                        new
                        {
                            CompulsionId = 1,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            Description = "Excessive Cleaning"
                        },
                        new
                        {
                            CompulsionId = 2,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            Description = "Tapping Windows"
                        },
                        new
                        {
                            CompulsionId = 3,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            Description = "Blinking Repeatedly"
                        },
                        new
                        {
                            CompulsionId = 4,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            Description = "Excessive Cleaning"
                        },
                        new
                        {
                            CompulsionId = 5,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            Description = "Excessive Cleaning"
                        },
                        new
                        {
                            CompulsionId = 6,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            Description = "Excessive Cleaning"
                        },
                        new
                        {
                            CompulsionId = 7,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            Description = "Excessive Cleaning"
                        });
                });

            modelBuilder.Entity("Capstone.Models.Data.PatientAction", b =>
                {
                    b.Property<int>("PatientActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientActionId");

                    b.ToTable("PatientAction");

                    b.HasData(
                        new
                        {
                            PatientActionId = 1,
                            ActionName = "Resist"
                        },
                        new
                        {
                            PatientActionId = 2,
                            ActionName = "Submits"
                        },
                        new
                        {
                            PatientActionId = 3,
                            ActionName = "Undo"
                        });
                });

            modelBuilder.Entity("Capstone.Models.Data.RefreshToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Capstone.Models.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompulsionId")
                        .HasColumnType("int");

                    b.Property<int>("PatientActionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("RecordId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CompulsionId");

                    b.HasIndex("PatientActionId");

                    b.ToTable("Record");

                    b.HasData(
                        new
                        {
                            RecordId = 1,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 1,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 2,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 1,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 3,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 1,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 4,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 1,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 5,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 1,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 6,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 1,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 7,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 1,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 8,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 1,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 9,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 1,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 10,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 1,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 11,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 2,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 12,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 2,
                            PatientActionId = 3,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 13,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 2,
                            PatientActionId = 2,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 14,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 2,
                            PatientActionId = 3,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 15,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 2,
                            PatientActionId = 2,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 16,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 2,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 17,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 2,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 18,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 2,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 19,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 2,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 20,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 2,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 21,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 3,
                            PatientActionId = 2,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 22,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 3,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 23,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 3,
                            PatientActionId = 1,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 24,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 3,
                            PatientActionId = 2,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 25,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 3,
                            PatientActionId = 3,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 26,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 3,
                            PatientActionId = 3,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 27,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 3,
                            PatientActionId = 3,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 28,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 3,
                            PatientActionId = 3,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 29,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 3,
                            PatientActionId = 3,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RecordId = 30,
                            ApplicationUserId = "8f0ab5d8-905f-4d54-930a-e7d61ae57dfa",
                            CompulsionId = 3,
                            PatientActionId = 3,
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Capstone.Models.Data.Compulsion", b =>
                {
                    b.HasOne("Capstone.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Compulsions")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Capstone.Models.Data.RefreshToken", b =>
                {
                    b.HasOne("Capstone.Models.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Capstone.Models.Record", b =>
                {
                    b.HasOne("Capstone.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Models.Data.Compulsion", "Compulsion")
                        .WithMany("Records")
                        .HasForeignKey("CompulsionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Models.Data.PatientAction", "PatientAction")
                        .WithMany()
                        .HasForeignKey("PatientActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Capstone.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Capstone.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Capstone.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
